{"remainingRequest":"D:\\codeTest\\admin\\admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\codeTest\\admin\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\codeTest\\admin\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\codeTest\\admin\\admin\\src\\views\\modules\\yonghu\\add-or-update.vue?vue&type=template&id=d336c394&scoped=true&","dependencies":[{"path":"D:\\codeTest\\admin\\admin\\src\\views\\modules\\yonghu\\add-or-update.vue","mtime":1708480082000},{"path":"D:\\codeTest\\admin\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\codeTest\\admin\\admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\codeTest\\admin\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\codeTest\\admin\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}