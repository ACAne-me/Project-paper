{"remainingRequest":"D:\\codeTest\\front\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\codeTest\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\codeTest\\front\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\codeTest\\front\\front\\src\\pages\\news\\news-detail.vue?vue&type=template&id=25ae5053&scoped=true&","dependencies":[{"path":"D:\\codeTest\\front\\front\\src\\pages\\news\\news-detail.vue","mtime":1708480087000},{"path":"D:\\codeTest\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\codeTest\\front\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\codeTest\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\codeTest\\front\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}